// @generated
// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Events {
    #[prost(message, repeated, tag="1")]
    pub blocks: ::prost::alloc::vec::Vec<Block>,
    #[prost(message, repeated, tag="2")]
    pub transactions: ::prost::alloc::vec::Vec<Transaction>,
    #[prost(message, repeated, tag="3")]
    pub tx_events: ::prost::alloc::vec::Vec<TransactionEvent>,
    #[prost(message, repeated, tag="4")]
    pub block_events: ::prost::alloc::vec::Vec<BlockEvent>,
    #[prost(message, repeated, tag="5")]
    pub misbehaviors: ::prost::alloc::vec::Vec<Misbehavior>,
    #[prost(message, repeated, tag="6")]
    pub validator_updates: ::prost::alloc::vec::Vec<ValidatorUpdate>,
    #[prost(message, repeated, tag="7")]
    pub consensus_param_updates: ::prost::alloc::vec::Vec<ConsensusParamUpdate>,
    #[prost(message, repeated, tag="8")]
    pub transaction_messages: ::prost::alloc::vec::Vec<TransactionMessage>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Block {
    #[prost(message, optional, tag="1")]
    pub time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="2")]
    pub number: u64,
    #[prost(string, tag="3")]
    pub date: ::prost::alloc::string::String,
    #[prost(string, tag="4")]
    pub hash: ::prost::alloc::string::String,
    #[prost(uint64, tag="5")]
    pub version_consensus_block: u64,
    #[prost(uint64, tag="6")]
    pub version_consensus_app: u64,
    #[prost(string, tag="7")]
    pub chain_id: ::prost::alloc::string::String,
    #[prost(string, tag="8")]
    pub last_block_id: ::prost::alloc::string::String,
    #[prost(string, tag="9")]
    pub last_commit_hash: ::prost::alloc::string::String,
    #[prost(string, tag="10")]
    pub data_hash: ::prost::alloc::string::String,
    #[prost(string, tag="11")]
    pub validators_hash: ::prost::alloc::string::String,
    #[prost(string, tag="12")]
    pub next_validators_hash: ::prost::alloc::string::String,
    #[prost(string, tag="13")]
    pub consensus_hash: ::prost::alloc::string::String,
    #[prost(string, tag="14")]
    pub app_hash: ::prost::alloc::string::String,
    #[prost(string, tag="15")]
    pub last_results_hash: ::prost::alloc::string::String,
    #[prost(string, tag="16")]
    pub evidence_hash: ::prost::alloc::string::String,
    #[prost(string, tag="17")]
    pub proposer_address: ::prost::alloc::string::String,
    #[prost(uint64, tag="18")]
    pub total_transactions: u64,
    #[prost(uint64, tag="19")]
    pub successful_transactions: u64,
    #[prost(uint64, tag="20")]
    pub failed_transactions: u64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Transaction {
    #[prost(message, optional, tag="1")]
    pub block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="2")]
    pub block_number: u64,
    #[prost(string, tag="3")]
    pub block_date: ::prost::alloc::string::String,
    #[prost(string, tag="4")]
    pub block_hash: ::prost::alloc::string::String,
    #[prost(uint32, tag="5")]
    pub index: u32,
    #[prost(string, tag="6")]
    pub hash: ::prost::alloc::string::String,
    #[prost(uint32, tag="7")]
    pub code: u32,
    #[prost(string, tag="8")]
    pub data: ::prost::alloc::string::String,
    #[prost(string, tag="9")]
    pub log: ::prost::alloc::string::String,
    #[prost(string, tag="10")]
    pub info: ::prost::alloc::string::String,
    #[prost(int64, tag="11")]
    pub gas_wanted: i64,
    #[prost(int64, tag="12")]
    pub gas_used: i64,
    #[prost(string, tag="13")]
    pub codespace: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TransactionEvent {
    #[prost(message, optional, tag="1")]
    pub block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="2")]
    pub block_number: u64,
    #[prost(string, tag="3")]
    pub block_date: ::prost::alloc::string::String,
    #[prost(string, tag="4")]
    pub block_hash: ::prost::alloc::string::String,
    #[prost(string, tag="5")]
    pub tx_hash: ::prost::alloc::string::String,
    #[prost(uint32, tag="6")]
    pub index: u32,
    #[prost(string, tag="7")]
    pub r#type: ::prost::alloc::string::String,
    /// Should be Array(Tuple(Text, Text)) when supported by sink-files
    #[prost(string, tag="8")]
    pub attributes: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BlockEvent {
    #[prost(message, optional, tag="1")]
    pub block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="2")]
    pub block_number: u64,
    #[prost(string, tag="3")]
    pub block_date: ::prost::alloc::string::String,
    #[prost(string, tag="4")]
    pub block_hash: ::prost::alloc::string::String,
    #[prost(uint32, tag="5")]
    pub index: u32,
    #[prost(string, tag="6")]
    pub r#type: ::prost::alloc::string::String,
    #[prost(string, tag="7")]
    pub attributes: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Misbehavior {
    #[prost(message, optional, tag="1")]
    pub block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="2")]
    pub block_number: u64,
    #[prost(string, tag="3")]
    pub block_date: ::prost::alloc::string::String,
    #[prost(string, tag="4")]
    pub block_hash: ::prost::alloc::string::String,
    #[prost(uint32, tag="5")]
    pub index: u32,
    #[prost(string, tag="6")]
    pub r#type: ::prost::alloc::string::String,
    #[prost(string, tag="7")]
    pub validator_address: ::prost::alloc::string::String,
    #[prost(int64, tag="8")]
    pub validator_power: i64,
    #[prost(int64, tag="9")]
    pub height: i64,
    #[prost(message, optional, tag="10")]
    pub time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(int64, tag="11")]
    pub total_voting_power: i64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ValidatorUpdate {
    #[prost(message, optional, tag="1")]
    pub block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="2")]
    pub block_number: u64,
    #[prost(string, tag="3")]
    pub block_date: ::prost::alloc::string::String,
    #[prost(string, tag="4")]
    pub block_hash: ::prost::alloc::string::String,
    #[prost(uint32, tag="5")]
    pub index: u32,
    #[prost(string, tag="6")]
    pub public_key: ::prost::alloc::string::String,
    #[prost(int64, tag="7")]
    pub power: i64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ConsensusParamUpdate {
    #[prost(message, optional, tag="1")]
    pub block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="2")]
    pub block_number: u64,
    #[prost(string, tag="3")]
    pub block_date: ::prost::alloc::string::String,
    #[prost(string, tag="4")]
    pub block_hash: ::prost::alloc::string::String,
    #[prost(string, tag="5")]
    pub json: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TransactionMessage {
    #[prost(message, optional, tag="1")]
    pub block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="2")]
    pub block_number: u64,
    #[prost(string, tag="3")]
    pub block_date: ::prost::alloc::string::String,
    #[prost(string, tag="4")]
    pub block_hash: ::prost::alloc::string::String,
    #[prost(string, tag="5")]
    pub tx_hash: ::prost::alloc::string::String,
    #[prost(uint32, tag="6")]
    pub index: u32,
    #[prost(string, tag="7")]
    pub r#type: ::prost::alloc::string::String,
    #[prost(string, tag="8")]
    pub value: ::prost::alloc::string::String,
}
// @@protoc_insertion_point(module)
