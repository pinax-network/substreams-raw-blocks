// @generated
// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Events {
    #[prost(message, repeated, tag="1")]
    pub blocks: ::prost::alloc::vec::Vec<Block>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Block {
    /// clock
    ///
    /// TIMESTAMP
    #[prost(string, tag="1")]
    pub time: ::prost::alloc::string::String,
    #[prost(uint64, tag="2")]
    pub height: u64,
    #[prost(string, tag="3")]
    pub date: ::prost::alloc::string::String,
    /// indep_hash
    #[prost(string, tag="4")]
    pub indep_hash: ::prost::alloc::string::String,
    /// The nonce chosen to solve the mining problem
    #[prost(bytes="vec", tag="5")]
    pub nonce: ::prost::alloc::vec::Vec<u8>,
    /// `indep_hash` of the previous block in  the weave
    #[prost(string, tag="6")]
    pub previous_block: ::prost::alloc::string::String,
    /// POSIX time of block discovery
    #[prost(uint64, tag="7")]
    pub timestamp: u64,
    /// POSIX time of the last difficulty retarget
    #[prost(uint64, tag="8")]
    pub last_retarget: u64,
    /// Mining difficulty; the number `hash` must be greater than.
    #[prost(bytes="vec", tag="9")]
    pub diff: ::prost::alloc::vec::Vec<u8>,
    /// Mining solution hash of the block; must satisfy the mining difficulty
    #[prost(string, tag="10")]
    pub hash: ::prost::alloc::string::String,
    /// Merkle root of the tree of Merkle roots of block's transactions' data.
    #[prost(string, tag="11")]
    pub tx_root: ::prost::alloc::string::String,
    /// The root hash of the Merkle Patricia Tree containing
    /// all wallet (account) balances and the identifiers
    /// of the last transactions posted by them; if any.
    #[prost(string, tag="12")]
    pub wallet_list: ::prost::alloc::string::String,
    /// (string or) Address of the account to receive the block rewards. Can also be unclaimed which is encoded as a null byte
    #[prost(string, tag="13")]
    pub reward_addr: ::prost::alloc::string::String,
    /// Size of reward pool
    #[prost(bytes="vec", tag="14")]
    pub reward_pool: ::prost::alloc::vec::Vec<u8>,
    /// Size of the weave in bytes
    #[prost(bytes="vec", tag="15")]
    pub weave_size: ::prost::alloc::vec::Vec<u8>,
    /// Size of this block in bytes
    #[prost(bytes="vec", tag="16")]
    pub block_size: ::prost::alloc::vec::Vec<u8>,
    /// Required after the version 1.8 fork. Zero otherwise.
    /// The sum of the average number of hashes computed
    /// by the network to produce the past blocks including this one.
    #[prost(bytes="vec", tag="17")]
    pub cumulative_diff: ::prost::alloc::vec::Vec<u8>,
    /// Required after the version 1.8 fork. Null byte otherwise.
    /// The Merkle root of the block index - the list of {`indep_hash`; `weave_size`; `tx_root`} triplets
    #[prost(string, tag="18")]
    pub hash_list_merkle: ::prost::alloc::string::String,
    /// The proof of access; Used after v2.4 only; set as defaults otherwise
    #[prost(string, optional, tag="19")]
    pub poa_option: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag="20")]
    pub poa_tx_path: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag="21")]
    pub poa_data_path: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag="22")]
    pub poa_chunk: ::core::option::Option<::prost::alloc::string::String>,
}
// @@protoc_insertion_point(module)
