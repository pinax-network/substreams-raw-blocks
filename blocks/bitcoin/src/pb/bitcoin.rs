// @generated
// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Events {
    #[prost(message, repeated, tag="1")]
    pub blocks: ::prost::alloc::vec::Vec<Block>,
    #[prost(message, repeated, tag="2")]
    pub transactions: ::prost::alloc::vec::Vec<Transaction>,
    #[prost(message, repeated, tag="3")]
    pub inputs: ::prost::alloc::vec::Vec<Input>,
    #[prost(message, repeated, tag="4")]
    pub outputs: ::prost::alloc::vec::Vec<Output>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Block {
    #[prost(message, optional, tag="1")]
    pub time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(int64, tag="2")]
    pub height: i64,
    #[prost(string, tag="3")]
    pub date: ::prost::alloc::string::String,
    #[prost(string, tag="4")]
    pub hash: ::prost::alloc::string::String,
    #[prost(string, tag="5")]
    pub bits: ::prost::alloc::string::String,
    #[prost(string, tag="6")]
    pub chainwork: ::prost::alloc::string::String,
    #[prost(double, tag="7")]
    pub difficulty: f64,
    #[prost(double, tag="8")]
    pub total_fees: f64,
    #[prost(double, tag="9")]
    pub total_reward: f64,
    #[prost(double, tag="10")]
    pub mint_reward: f64,
    #[prost(string, tag="11")]
    pub merkle_root: ::prost::alloc::string::String,
    #[prost(int64, tag="12")]
    pub transaction_count: i64,
    #[prost(int64, tag="13")]
    pub nonce: i64,
    #[prost(string, tag="14")]
    pub coinbase: ::prost::alloc::string::String,
    #[prost(string, tag="15")]
    pub previous_block_hash: ::prost::alloc::string::String,
    #[prost(int64, tag="16")]
    pub size: i64,
    #[prost(int64, tag="17")]
    pub stripped_size: i64,
    #[prost(int64, tag="18")]
    pub version: i64,
    #[prost(int64, tag="19")]
    pub weight: i64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Transaction {
    #[prost(message, optional, tag="1")]
    pub block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(string, tag="2")]
    pub block_date: ::prost::alloc::string::String,
    #[prost(int64, tag="3")]
    pub block_height: i64,
    #[prost(int32, tag="4")]
    pub index: i32,
    #[prost(string, tag="5")]
    pub block_hash: ::prost::alloc::string::String,
    #[prost(string, tag="6")]
    pub id: ::prost::alloc::string::String,
    #[prost(int64, tag="7")]
    pub lock_time: i64,
    #[prost(int64, tag="8")]
    pub size: i64,
    #[prost(int64, tag="9")]
    pub virtual_size: i64,
    #[prost(string, tag="10")]
    pub coinbase: ::prost::alloc::string::String,
    #[prost(bool, tag="11")]
    pub is_coinbase: bool,
    #[prost(int64, tag="12")]
    pub version: i64,
    #[prost(int32, tag="13")]
    pub input_count: i32,
    #[prost(int32, tag="14")]
    pub output_count: i32,
    #[prost(double, tag="15")]
    pub input_value: f64,
    #[prost(double, tag="16")]
    pub output_value: f64,
    #[prost(double, tag="17")]
    pub fee: f64,
    #[prost(string, tag="18")]
    pub hex: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Input {
    #[prost(message, optional, tag="1")]
    pub block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(string, tag="2")]
    pub block_date: ::prost::alloc::string::String,
    #[prost(int64, tag="3")]
    pub block_height: i64,
    #[prost(string, tag="4")]
    pub block_hash: ::prost::alloc::string::String,
    #[prost(string, tag="5")]
    pub tx_id: ::prost::alloc::string::String,
    #[prost(int32, tag="6")]
    pub index: i32,
    #[prost(int64, tag="7")]
    pub spent_block_height: i64,
    #[prost(string, tag="8")]
    pub spent_tx_id: ::prost::alloc::string::String,
    #[prost(int64, tag="9")]
    pub spent_output_number: i64,
    #[prost(double, tag="10")]
    pub value: f64,
    #[prost(string, tag="11")]
    pub address: ::prost::alloc::string::String,
    #[prost(string, tag="12")]
    pub r#type: ::prost::alloc::string::String,
    #[prost(string, tag="13")]
    pub coinbase: ::prost::alloc::string::String,
    #[prost(bool, tag="14")]
    pub is_coinbase: bool,
    #[prost(string, tag="15")]
    pub script_asm: ::prost::alloc::string::String,
    #[prost(string, tag="16")]
    pub script_hex: ::prost::alloc::string::String,
    #[prost(string, tag="17")]
    pub script_desc: ::prost::alloc::string::String,
    #[prost(string, tag="18")]
    pub script_signature_asm: ::prost::alloc::string::String,
    #[prost(string, tag="19")]
    pub script_signature_hex: ::prost::alloc::string::String,
    #[prost(int64, tag="20")]
    pub sequence: i64,
    #[prost(string, repeated, tag="21")]
    pub witness_data: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Output {
    #[prost(message, optional, tag="1")]
    pub block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(string, tag="2")]
    pub block_date: ::prost::alloc::string::String,
    #[prost(int64, tag="3")]
    pub block_height: i64,
    #[prost(string, tag="4")]
    pub block_hash: ::prost::alloc::string::String,
    #[prost(string, tag="5")]
    pub tx_id: ::prost::alloc::string::String,
    #[prost(int64, tag="6")]
    pub index: i64,
    #[prost(double, tag="7")]
    pub value: f64,
    #[prost(string, tag="8")]
    pub address: ::prost::alloc::string::String,
    #[prost(string, tag="9")]
    pub r#type: ::prost::alloc::string::String,
    #[prost(string, tag="10")]
    pub script_asm: ::prost::alloc::string::String,
    #[prost(string, tag="11")]
    pub script_hex: ::prost::alloc::string::String,
}
// @@protoc_insertion_point(module)
