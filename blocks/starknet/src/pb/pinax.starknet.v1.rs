// @generated
// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EventsOutput {
    #[prost(message, repeated, tag="1")]
    pub blocks: ::prost::alloc::vec::Vec<Block>,
    #[prost(message, repeated, tag="2")]
    pub transactions: ::prost::alloc::vec::Vec<Transaction>,
    #[prost(message, repeated, tag="3")]
    pub access_lists: ::prost::alloc::vec::Vec<AccessList>,
    #[prost(message, repeated, tag="4")]
    pub events: ::prost::alloc::vec::Vec<Events>,
    #[prost(message, repeated, tag="5")]
    pub calls: ::prost::alloc::vec::Vec<Call>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Block {
    #[prost(message, optional, tag="1")]
    pub time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="2")]
    pub number: u64,
    #[prost(string, tag="3")]
    pub date: ::prost::alloc::string::String,
    #[prost(string, tag="4")]
    pub hash: ::prost::alloc::string::String,
    #[prost(string, tag="5")]
    pub l1_da_mode: ::prost::alloc::string::String,
    #[prost(uint64, tag="6")]
    pub l1_data_gas_price_in_fri: u64,
    #[prost(uint64, tag="7")]
    pub l1_data_gas_price_in_wei: u64,
    #[prost(uint64, tag="8")]
    pub l1_gas_price_in_fri: u64,
    #[prost(uint64, tag="9")]
    pub l1_gas_price_in_wei: u64,
    #[prost(string, tag="10")]
    pub starknet_version: ::prost::alloc::string::String,
    #[prost(uint32, tag="11")]
    pub tx_count: u32,
    #[prost(string, tag="12")]
    pub new_root: ::prost::alloc::string::String,
    #[prost(string, tag="13")]
    pub parent_hash: ::prost::alloc::string::String,
    #[prost(string, tag="14")]
    pub sequencer_address: ::prost::alloc::string::String,
    #[prost(string, tag="15")]
    pub state_diff: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Transaction {
    #[prost(message, optional, tag="1")]
    pub block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="2")]
    pub block_number: u64,
    #[prost(string, tag="3")]
    pub block_date: ::prost::alloc::string::String,
    #[prost(string, tag="4")]
    pub block_hash: ::prost::alloc::string::String,
    /// Using string to represent decimal(38,0)
    #[prost(string, tag="5")]
    pub value: ::prost::alloc::string::String,
    #[prost(uint64, tag="6")]
    pub gas_limit: u64,
    #[prost(uint64, tag="7")]
    pub gas_price: u64,
    #[prost(uint64, tag="8")]
    pub gas_used: u64,
    #[prost(uint64, tag="9")]
    pub max_fee_per_gas: u64,
    #[prost(uint64, tag="10")]
    pub max_priority_fee_per_gas: u64,
    #[prost(int64, tag="11")]
    pub priority_fee_per_gas: i64,
    #[prost(uint64, tag="12")]
    pub nonce: u64,
    #[prost(uint64, tag="13")]
    pub index: u64,
    #[prost(bool, tag="14")]
    pub success: bool,
    /// Varbinary represented as string
    #[prost(string, tag="15")]
    pub from: ::prost::alloc::string::String,
    #[prost(string, tag="16")]
    pub to: ::prost::alloc::string::String,
    #[prost(string, tag="17")]
    pub data: ::prost::alloc::string::String,
    #[prost(string, tag="18")]
    pub hash: ::prost::alloc::string::String,
    /// Varchar represented as string
    #[prost(string, tag="19")]
    pub r#type: ::prost::alloc::string::String,
    #[prost(string, repeated, tag="20")]
    pub blob_versioned_hashes: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(uint64, tag="21")]
    pub max_fee_per_blob_gas: u64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AccessList {
    /// clock
    #[prost(message, optional, tag="1")]
    pub block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="2")]
    pub block_number: u64,
    #[prost(string, tag="3")]
    pub block_date: ::prost::alloc::string::String,
    #[prost(string, tag="4")]
    pub block_hash: ::prost::alloc::string::String,
    /// transaction
    #[prost(string, tag="5")]
    pub tx_hash: ::prost::alloc::string::String,
    #[prost(bool, tag="6")]
    pub tx_success: bool,
    /// Index of the access list entry in the transaction
    #[prost(uint64, tag="7")]
    pub index: u64,
    /// access list
    #[prost(string, tag="8")]
    pub address: ::prost::alloc::string::String,
    #[prost(string, repeated, tag="9")]
    pub storage_keys: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Events {
    /// clock
    #[prost(message, optional, tag="1")]
    pub block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="2")]
    pub block_number: u64,
    #[prost(string, tag="3")]
    pub block_date: ::prost::alloc::string::String,
    #[prost(string, tag="4")]
    pub block_hash: ::prost::alloc::string::String,
    /// block
    #[prost(string, tag="5")]
    pub block_new_root: ::prost::alloc::string::String,
    #[prost(string, tag="6")]
    pub block_parent_hash: ::prost::alloc::string::String,
    #[prost(string, tag="7")]
    pub block_sequencer_address: ::prost::alloc::string::String,
    #[prost(string, tag="8")]
    pub block_starknet_version: ::prost::alloc::string::String,
    /// block counters
    #[prost(string, tag="9")]
    pub block_l1_da_mode: ::prost::alloc::string::String,
    #[prost(uint64, tag="10")]
    pub block_l1_data_gas_price_in_fri: u64,
    #[prost(uint64, tag="11")]
    pub block_l1_data_gas_price_in_wei: u64,
    #[prost(uint64, tag="12")]
    pub block_l1_gas_price_in_fri: u64,
    #[prost(uint64, tag="13")]
    pub block_l1_gas_price_in_wei: u64,
    /// event
    #[prost(uint32, tag="14")]
    pub event_index: u32,
    #[prost(string, tag="15")]
    pub tx_hash: ::prost::alloc::string::String,
    #[prost(string, repeated, tag="16")]
    pub data: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, repeated, tag="17")]
    pub keys: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, tag="18")]
    pub from_address: ::prost::alloc::string::String,
    #[prost(string, tag="19")]
    pub class_hash: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Call {
    /// clock
    #[prost(message, optional, tag="1")]
    pub block_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(uint64, tag="2")]
    pub block_number: u64,
    #[prost(string, tag="3")]
    pub block_date: ::prost::alloc::string::String,
    #[prost(string, tag="4")]
    pub block_hash: ::prost::alloc::string::String,
    /// block
    #[prost(string, tag="5")]
    pub block_l1_da_mode: ::prost::alloc::string::String,
    #[prost(uint64, tag="6")]
    pub block_l1_data_gas_price_in_fri: u64,
    #[prost(uint64, tag="7")]
    pub block_l1_data_gas_price_in_wei: u64,
    #[prost(uint64, tag="8")]
    pub block_l1_gas_price_in_fri: u64,
    #[prost(uint64, tag="9")]
    pub block_l1_gas_price_in_wei: u64,
    #[prost(string, tag="10")]
    pub block_starknet_version: ::prost::alloc::string::String,
    /// transaction
    #[prost(uint32, tag="11")]
    pub tx_index: u32,
    #[prost(string, tag="12")]
    pub tx_type: ::prost::alloc::string::String,
    /// call
    #[prost(string, tag="13")]
    pub call_type: ::prost::alloc::string::String,
    #[prost(string, tag="14")]
    pub context: ::prost::alloc::string::String,
    #[prost(string, tag="15")]
    pub entry_point_type: ::prost::alloc::string::String,
    #[prost(uint32, tag="16")]
    pub execution_resources_bitwise_builtin_applications: u32,
    #[prost(uint64, tag="17")]
    pub execution_resources_data_availability_l1_gas: u64,
    #[prost(uint64, tag="18")]
    pub execution_resources_data_availability_l1_data_gas: u64,
    #[prost(uint32, tag="19")]
    pub execution_resources_ec_op_builtin_applications: u32,
    #[prost(uint32, tag="20")]
    pub execution_resources_ecdsa_builtin_applications: u32,
    #[prost(uint32, tag="21")]
    pub execution_resources_keccak_builtin_applications: u32,
    #[prost(uint32, tag="22")]
    pub execution_resources_memory_holes: u32,
    #[prost(uint32, tag="23")]
    pub execution_resources_pedersen_builtin_applications: u32,
    #[prost(uint32, tag="24")]
    pub execution_resources_poseidon_builtin_applications: u32,
    #[prost(uint32, tag="25")]
    pub execution_resources_range_check_builtin_applications: u32,
    #[prost(uint32, tag="26")]
    pub execution_resources_segment_arena_builtin: u32,
}
// @@protoc_insertion_point(module)
